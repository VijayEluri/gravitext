#!/usr/bin/env jruby
# -*- ruby -*-
#--
# Copyright (c) 2007-2012 David Kellum
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.  You
# may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.  See the License for the specific language governing
# permissions and limitations under the License.
#++

$LOAD_PATH.unshift File.join( File.dirname(__FILE__), "..", "lib" )

require 'gravitext-util'
require 'gravitext-util/perftest'
require 'java'

module TestCollection
  include Gravitext
  include Gravitext::Concurrent

  import 'com.gravitext.htmap.perftests.HTMapPerfTest'
  import 'com.gravitext.perftest.tests.EmptyPerfTest'
  import 'com.gravitext.perftest.tests.SortPerfTest'
  import 'com.gravitext.util.perftests.ByteBufferInputStreamPerfTest'
  import 'com.gravitext.util.perftests.FastRandomPerfTest'
  import 'com.gravitext.util.perftests.ResizableCharBufferWriterPerfTest'

  def self.run
    tests = TestCollection::lookup_factories( ARGV[0] || 'random' )

    harness = PerfTest::Harness.new( tests )
    # harness.do_per_run_timing = false #FIXME
    # harness.thread_count = 2
    # harness.final_runs = 10000

    harness.execute
  end

  def self.lookup_factories( name )
    case name
    when 'random'
      tests = FastRandomPerfTest::Mode.values.map do |mode|
        FastRandomPerfTest.new( mode )
      end

      btest = BlockTestFactory.new do |run,fr|
        10_000.times do
          rand( 1000 )
        end
        rand( 3 )
      end
      btest.name = 'Ruby-Kernel.rand'
      tests << btest

      btest = BlockTestFactory.new do |run,random|
        10_000.times do
          random.next_int( 1000 )
        end
        random.next_int( 3 )
      end
      btest.name = 'Ruby-FAST'
      tests << btest

      tests
    when 'htmap'
      HTMapPerfTest::TEST_CLASSES.map do |cls|
        HTMapPerfTest.new( cls )
      end
    when 'buffer-writer'
      ResizableCharBufferWriterPerfTest::TEST_CLASSES.map do |cls|
        ResizableCharBufferWriterPerfTest.new( cls )
      end
    when 'buffer-instream'
      tests = ByteBufferInputStreamPerfTest::TEST_CLASSES.map do |cls|
        ByteBufferInputStreamPerfTest.new( cls )
      end
      tests += ByteBufferInputStreamPerfTest::TEST_CLASSES.map do |cls|
        t = ByteBufferInputStreamPerfTest.new( cls )
        t.read_one = true
        t
      end
    when 'empty'
      btest = BlockTestFactory.new { 1 }
      btest.name = 'RubyEmptyBlock'
      [ EmptyPerfTest.new, REmptyTestFactory.new, btest ]
    when 'sort'
      btest = BlockTestFactory.new do
        numbers = []
        ( rand( 10000 ) + 10 ).times do
          numbers << rand( 10000 )
        end
        numbers.sort!
        numbers.first
      end
      btest.name = 'RubySort'
      [ SortPerfTest.new, btest ]
    end
  end

  class REmptyTestFactory
    include Gravitext::Concurrent
    include TestFactory
    include TestRunnable

    def name
      'RubyEmpty'
    end

    def create_test_runnable( seed )
      self.class.new
    end

    def run_iteration( run )
      1
    end
  end

end

TestCollection.run
